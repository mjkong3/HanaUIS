<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="board_upload" width="1280" height="720" titletext="New Form" onload="board_upload_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Static id="stt_boardTop" taborder="0" text="공지사항" left="563" top="16" width="155" height="74" font="30pt &quot;gulim&quot;,&quot;한컴 고딕&quot;"/>
        <Static id="Static01" taborder="1" text="제목" left="174" top="134" width="172" height="53" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none"/>
        <Static id="Static01_00" taborder="2" text="작성자" left="174" top="194" width="172" height="53" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none"/>
        <Static id="Static01_01" taborder="3" text="내용" left="174" top="257" width="172" height="197" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none"/>
        <Static id="Static01_00_00" taborder="4" text="첨부파일" left="174" top="460" width="172" height="93" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none" onclick="Static01_00_onclick"/>
        <Grid id="grd_file" taborder="5" left="377" top="464" width="453" height="94" binddataset="ds_file">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="449"/>
              </Columns>
              <Rows>
                <Row size="24" band="head"/>
                <Row size="32"/>
              </Rows>
              <Band id="head">
                <Cell text="파 일"/>
              </Band>
              <Band id="body">
                <Cell text="bind:FILE_NAME"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn_closeBoard" taborder="6" text="닫기" left="714" top="617" width="72" height="33" onclick="btn_closeBoard_onclick"/>
        <Static id="stt_uploader" taborder="7" left="400" top="200" width="250" height="40"/>
        <Static id="Static01_00_01" taborder="8" text="게시일" left="660" top="137" width="172" height="53" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none"/>
        <Static id="stt_regDate" taborder="9" left="1305" top="153" width="145" height="40" text="" textAlign="center"/>
        <Static id="Static01_00_01_00" taborder="10" text="게시번호" left="660" top="197" width="172" height="53" textAlign="center" font="20pt &quot;Arial&quot;" border="0px none, 1px solid, 0px none, 0px none"/>
        <Static id="stt_boardCode" taborder="11" left="898" top="203" width="145" height="40"/>
        <Button id="btn_updateBoard" taborder="12" text="수정" left="634" top="617" width="72" height="33" onclick="btn_updateBoard_onclick"/>
        <FileDownload id="btn_fileDown" taborder="13" text="파일 다운" left="845" top="482" width="58" height="48" onclick="btn_fileDown_onclick"/>
        <TextArea id="txt_Title" taborder="14" left="377" top="137" width="283" height="46"/>
        <TextArea id="txt_Content" taborder="15" left="377" top="270" width="666" height="160"/>
        <Button id="btn_addFile" taborder="16" text="파일 첨부" left="916" top="482" width="57" height="48" onclick="btn_addFile_onclick"/>
        <Button id="btn_deleteFile" taborder="17" text="파일 삭제" left="983" top="482" width="60" height="48" onclick="btn_deleteFile_onclick"/>
        <Button id="btn_deleteBoard" taborder="18" text="삭제" left="971" top="617" width="72" height="33" color="white" background="#ff0505" onclick="btn_deleteBoard_onclick"/>
        <Calendar id="cal_Dtm" taborder="19" left="890" top="140" width="153" height="47"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/*
	파일 데이터셋 ds_file 추가가 어떤 부분에 들어가야 할지 바꿔줘야 함
	//var nRowIdx = this.ds_file.addRow();
    //this.ds_file.setColumn(nRowIdx, 0, obj.filename);
*/


this.board_upload_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.fnOnload();
	
	this.ds_copyCat.copyData(this.ds_board, true);
};

/************************************************************************
 * 							기능
 ************************************************************************/

// 호출
this.fnOnload = function(obj, e) {
	
	var BOARD_CODE = this.parent.BOARD_CODE;  // 부모창에서 넘어온 board_code 값 받기
	var CRE_USR = this.parent.NAME;
    trace("Received board_code: " + BOARD_CODE);  // board_code 값 확인 (콘솔에 출력)
	trace("Received CRE_USR: " + CRE_USR);  // CRE_USR 값 확인 (콘솔에 출력)
    
    // board_code를 전자정부 프레임워크로 넘길 로직 추가
    this.fnSendBoardCode(BOARD_CODE);
	trace(this.ds_board.getColumn(0, "CRE_DTM"));
	
	console.log(this.ds_board.saveXML());
	console.log(this.ds_file.saveXML());
	
	trace(this.ds_board.getColumn(0,"TITLE"));
};
	
// 전자정부 프레임워크로 board_code 전달하는 함수
this.fnSendBoardCode = function(BOARD_CODE) {
    var strSvcId    = "selectBoard";
    var strSvcUrl   = "svc::selectBoard.do";
    var inData      = "";
    var outData     = "ds_board=ds_board ds_file=ds_file";  // 결과를 받을 데이터셋
    var strArg      = "id=" + BOARD_CODE;    // board_code 값을 서버로 전달
    var callBackFnc = "fnCallback";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
};

/************************************************************************
 * 							파일 다운로드
 ************************************************************************/

this.Form_onload = function(obj, e)
{
	//var deletedate = this.ds_file.getColumn(0, "REGDATE");
	
    this.FileDownTransfer00 = new FileDownTransfer();
    this.addChild("FileDownTransfer00", this.FileDownTransfer00);

    this.FileDownTransfer00.addEventHandler("onsuccess", this.FileDownTransfer00_onsuccess, this);
    this.FileDownTransfer00.addEventHandler("onerror", this.FileDownTransfer00_onerror, this);
};

// 다운로드 버튼 클릭 이벤트
this.btn_fileDown_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo)
{
    // 데이터셋에서 파일 URL 가져오기
    var fileUrl = "http://localhost:8082/HanaUIS/filedownload.jsp?fileName=" + encodeURIComponent(this.ds_file.getColumn(this.ds_file.rowposition, "FILE_NAME"));

	console.log(this.ds_file.getColumn(this.ds_file.rowposition, "FILE_NAME"));

    // 파일이 없을 경우
	if (this.ds_file.getColumn(0, "FILE_NAME") == 0
	|| this.ds_file.getColumn(0, "FILE_NAME") == 'undefined'
	|| this.ds_file.getColumn(0, "FILE_NAME") == null) {
		alert("파일이 존재하지 않습니다");
		return;
	}
	
	// 파일 URL 확인
    if (!fileUrl) {
        alert("파일 URL이 존재하지 않습니다.");
        return;
    }
	alert(this.ds_file.getColumn(this.ds_file.rowposition, "FILE_NAME"));
    // 다운로드 URL 설정 및 파일 다운로드 시작
    //this.FileDownTransfer00.downloadurl(fileUrl);
	this.FileDownTransfer00.set_url(fileUrl);
	this.FileDownTransfer00.set_downloadfilename(this.ds_file.getColumn(this.ds_file.rowposition, "FILE_NAME"));
    this.FileDownTransfer00.download();
};

// 다운로드 성공 이벤트
this.FileDownTransfer00_onsuccess = function(obj:nexacro.FileDownTransfer, e:nexacro.FileDownTransferEventInfo)
{
    alert("파일 다운로드가 완료되었습니다.");
};

// 다운로드 실패 이벤트
this.FileDownTransfer00_onerror = function(obj:nexacro.FileDownTransfer, e:nexacro.FileDownTransferErrorEventInfo)
{
    alert("파일 다운로드 중 오류가 발생했습니다. 오류 코드: " + e.errormsg);
};





/************************************************************************
 *							파일 업로드
 ************************************************************************/

// 파일 업로드 버튼
this.btn_addFile_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
    this.FileDialog00.open('nexacro17', FileDialog.MULTILOAD);
};

this.FileDialog00_onclose = function(obj:nexacro.FileDialog, e:nexacro.FileDialogEventInfo) {
    // e.virtualfiles가 정상적으로 들어오는지 확인
    if (e.virtualfiles && e.virtualfiles.length > 0) {
        this.addFileList(e.virtualfiles);  // 파일 추가 처리 함수 호출

        // 파일 목록을 확인하기 위해 로그 출력
        console.log("파일 개수: " + e.virtualfiles.length);
        for (var i = 0; i < e.virtualfiles.length; i++) {
            console.log("파일명: " + e.virtualfiles[i].filename);
        }

        // ds_file 내용 확인
        console.log(this.ds_file.saveXML());
    } else {
        console.log("선택된 파일이 없습니다.");
    }
};

// 파일 추가 처리 함수
this.addFileList = function(filelist) {
    for (var i = 0; i < filelist.length; i++) {
        var file = filelist[i];  // 각 virtualfile 객체 참조
        var filename = file.filename;  // filename을 file 객체에서 가져옴
        var fileExists = false;

        // 이미 동일한 파일명이 있는지 확인
        for (var j = 0; j < this.ds_file.getRowCount(); j++) {
            if (this.ds_file.getColumn(j, "FILE_NAME") === filename) {
                fileExists = true;
                this.alert("동일한 이름의 파일이 존재합니다");
                break;
            }
        }

        // 파일이 존재하지 않는 경우에만 추가
        if (!fileExists) {
            var nRow = this.ds_file.addRow();  // 새로운 행 추가
            if (nRow >= 0) {
                this.ds_file.setColumn(nRow, "FILE_NAME", filename);  // 파일 이름 추가
				trace("파일추가시작");
                file.addEventHandler("onsuccess", this.FileList_onsuccess, this);  // 이벤트 핸들러 추가
                file.addEventHandler("onerror", this.FileList_onerror, this);  // 에러 핸들러 추가

                // 파일 열기 (비동기 처리)
                file.open(null, 1);
            } else {
                console.log("행 추가 실패: " + filename);
            }
        } else {
            console.log("파일이 이미 존재합니다: " + filename);
        }
    }
};




// 파일 드래그 드랍 관련
this.grd_file_ondrop = function(obj:nexacro.Grid,e:nexacro.GridDragEventInfo)
{
    if(e.datatype == "file")
    {
        this.addFileList(e.filelist);
		this.ds_file.setColumn(0, "FILE_NAME", e.virtualfiles[0].filename);
    }
};


// virtualfile의 성공 실패 
this.FileList_onsuccess = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo) {
    switch (e.reason) {
        case 9: // 파일이 성공적으로 열림
            var filename = obj.filename;  // 파일 이름 가져오기
            var fileExists = false;

            // 동일 파일명 확인
            for (var j = 0; j < this.ds_file.getRowCount(); j++) {
                if (this.ds_file.getColumn(j, "FILE_NAME") === filename) {
                    fileExists = true;
                    console.log("파일이 이미 존재합니다: " + filename);
                    break;
                }
            }

            // 파일이 존재하지 않을 경우 데이터셋에 추가
            if (!fileExists) {
                var nRowIdx = this.ds_file.addRow();
                if (nRowIdx >= 0) {
                    this.ds_file.setColumn(nRowIdx, "FILE_NAME", filename);  // 파일명 추가
                    this.FileUpTransfer00.addFile(filename, obj);  // 파일 전송 준비
                } else {
                    console.log("행 추가 실패: " + filename);
                }
            }
            break;
    }
};

this.FileList_onerror = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileErrorEventInfo)
{
    trace("errortype: "+e.errortype);
    trace("errormsg: "+e.errormsg);
    trace("statuscode: "+e.statuscode);
};


// 
/************************************************************************
 * 				업로드한 파일 전체 삭제
 ************************************************************************/

this.btn_deleteFile_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	//selected file delete
	/*var nRow = this.ds_file.rowposition;*/
	this.ds_file.clearData();
	
// 	var objFileList = this.fileUpTransfer00.find(nRow);	// 선택 파일 찾기
// 	this.fileUpTransfer00.removeFile(objFileList); // 선택 파일삭제
	this.FileUpTransfer00.clearFileList();
};

// 파일 처리 진행, 오류, 완료 이벤트 함수
this.FileUpTransfer00_onprogress = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferProgressEventInfo)
{
    this.fn_addlog(e.loaded+"/"+e.total);
};

this.FileUpTransfer00_onsuccess = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferEventinfo)
{
    this.fn_addlog(e.code);
    this.fn_addlog(e.message);
};

this.FileUpTransfer00_onerror = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferErrorEventInfo)
{
    this.fn_addlog(e.errormsg);
    this.fn_addlog(e.statuscode);
};

/************************************************************************
 * 							수정 버튼 이벤트
 ************************************************************************/
  
  // 공지사항 업데이트 기능
  this.fnUdateBoardData = function() {
 
	// 제목 및 공지사항이 비었을 때 처리
	if(this.txt_Title.value == ''
		 || this.txt_Title.value == 'undefined'
		 || this.txt_Title.value == null) {
			alert("제목을 입력해주세요.");
			return;
	}
		if(this.txt_Content.value == ''
		 || this.txt_Content.value == 'undefined'
		 || this.txt_Content.value == null) {
			alert("내용을 입력해주세요.");
			return;
	}

    var strSvcId    = "updateBoard";
    var strSvcUrl   = "svc::updateBoard.do";
    var inData      = "ds_board=ds_board ds_copyCat=ds_copyCat";
    var outData     = "";  // 결과를 받을 데이터셋
    var strArg      = ""
    var callBackFnc = "fnCallbackUpdateFile";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
};

// 파일 저장 후 게시물 저장 호출될 콜백 함수
this.fnCallbackUpdateFile = function(svcID, errorCode, errorMsg) {
    if (errorCode == 0) {  // 정상적으로 board가 저장되었을 때
		console.log("FILE 테이블 삭제 완료");
		console.log("BOARD 테이블 수정 완료");

		this.fnUpdateFileData(); // 2. 게시글 저장 후 파일을 저장하는 함수를 호출
    } else {
        alert("게시글 저장 중 오류 발생: " + errorMsg);
    }
};


 // 파일 업데이트 기능
 this.fnUpdateFileData = function() {
    var strSvcId    = "updateFile";
    var strSvcUrl   = "svc::updateFile.do";
    var inData      = "ds_file=ds_file ds_board=ds_board";
    var outData     = "";  // 결과를 받을 데이터셋
    var strArg      = ""
    var callBackFnc = "fnCallbackUpdated";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
};

this.fnCallbackUpdated = function(svcID, errorCode, errorMsg) {
	if (errorCode == 0) {  // 정상적으로 게시글이 저장되었을 때
		alert("게시글이 수정 되었습니다");
		this.close;
    } else {
        alert("게시글 저장 중 오류 발생: " + errorMsg);
    }

};
 

this.btn_updateBoard_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	this.fnUdateBoardData();
};

/************************************************************************
 * 							삭제 관련
 ************************************************************************/

this.fnDeleteBoardData = function() {
    var strSvcId    = "deleteBoard";
    var strSvcUrl   = "svc::deleteBoard.do";
    var inData      = "ds_copyCat = ds_copyCat";  // 넘어가는 데이터셋
    var outData     = "";  // 결과를 받을 데이터셋
    var strArg      = ""
    var callBackFnc = "fnCallbackDeletBoard";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
}

this.btn_deleteBoard_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var confirmPopup = this.confirm("삭제하시겠습니까?"); 
	
	if (confirmPopup) {
		trace("삭제진행")
		this.fnDeleteBoardData();
	}
};

this.fnCallDeleteBoard = function(svcID, errorCode, errorMsg) {
	if (errorCode == 0) {  // 정상적으로 게시글이 저장되었을 때
		alert("게시글이 삭제 되었습니다");
		this.close;
    } else {
        alert("게시글 삭제 중 오류 발생: " + errorMsg);
    }

};

/*
// 변경사항 감지
this.btn_closeBoard_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.ds_copyCat == this.ds_board)
	{
		this.close
	} else {
		var onChanged = this.confirm("변경 된 사항이 있습니다.");
		if (!onChanged) {
			this.close();
		}
	}
};
*/
]]></Script>
    <Objects>
      <Dataset id="ds_board">
        <ColumnInfo>
          <Column id="TITLE" type="STRING" size="256"/>
          <Column id="CRE_USR" type="STRING" size="256"/>
          <Column id="CONTENT" type="STRING" size="256"/>
          <Column id="CRE_DTM" type="STRING" size="256"/>
          <Column id="BOARD_CODE" type="STRING" size="256"/>
          <Column id="FILE_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <FileDownTransfer id="FileDownTransfer00" onerror="FileDownTransfer00_onerror" onsuccess="FileDownTransfer00_onsuccess"/>
      <Dataset id="ds_file" useclientlayout="true">
        <ColumnInfo>
          <Column id="FILE_NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <FileUpTransfer id="FileUpTransfer00" onsuccess="FileUpTransfer00_onsuccess" onprogress="FileUpTransfer00_onprogress" onerror="FileUpTransfer00_onerror"/>
      <FileDialog id="FileDialog00" onclose="FileDialog00_onclose"/>
      <Dataset id="ds_copyCat"/>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="stt_regDate" propid="text" datasetid="ds_board" columnid="CRE_DTM"/>
      <BindItem id="item2" compid="stt_uploader" propid="text" datasetid="ds_board" columnid="ADMIN_NAME"/>
      <BindItem id="item3" compid="stt_boardCode" propid="text" datasetid="ds_board" columnid="BOARD_CODE"/>
      <BindItem id="item5" compid="txt_Title" propid="value" datasetid="ds_board" columnid="TITLE"/>
      <BindItem id="item6" compid="txt_Content" propid="value" datasetid="ds_board" columnid="CONTENT"/>
      <BindItem id="item0" compid="cal_Dtm" propid="value" datasetid="ds_board" columnid="CRE_DTM"/>
    </Bind>
  </Form>
</FDL>
