<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="board_upload" width="960" titletext="New Form" onload="board_upload_onload" onsize="board_upload_onsize" height="720">
    <Layouts>
      <Layout height="720" width="960">
        <Static id="stt_top" taborder="0" text="공지사항 등록" left="362" top="27" width="255" height="74" font="30pt/normal &quot;Arial&quot;"/>
        <Static id="stt_title" taborder="1" text="제목" left="41" top="154" width="172" height="46" textAlign="center" font="16pt &quot;Arial&quot;" border="0px none,10px darkblue solid,0px none,0px none"/>
        <Static id="stt_boarder" taborder="2" text="작성자" left="42" top="217" width="172" height="40" textAlign="center" font="16pt &quot;Arial&quot;" border="0px none,10px darkblue solid,0px none,0px none" onclick="Static01_00_onclick"/>
        <Static id="stt_content" taborder="3" text="내용" left="41" top="277" width="172" height="180" textAlign="center" font="16pt &quot;Arial&quot;" border="0px none,10px darkblue solid,0px none,0px none"/>
        <TextArea id="txt_content" taborder="4" left="277" top="277" width="584" height="180" textAlign="left" font="16px/1.2 &quot;Gulim&quot;" scrolltype="vertical" readonly="false" wordWrap="english" scrollbartype="auto auto" scrollbarsize="10" onkeydown="txt_content_onkeydown"/>
        <Static id="stt_file" taborder="5" text="첨부파일" left="41" top="stt_content:25" width="172" height="93" textAlign="center" font="16pt &quot;Arial&quot;" border="0px none,10px darkblue solid,0px none,0px none" onclick="Static01_00_onclick"/>
        <ImageViewer id="ImageViewer00" taborder="12" left="277" top="txt_content:10" width="584" height="5" visible="false" onload="ImageViewer00_onload" stretch="none" fittocontents="none"/>
        <Grid id="grd_file" taborder="6" left="277" top="ImageViewer00:10" width="480" height="96" binddataset="ds_file" onclick="grd_file_onclick" ondrop="grd_file_ondrop" ondragenter="grd_file_ondragenter" ondragleave="grd_file_ondragleave">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="378"/>
                <Column size="100"/>
              </Columns>
              <Rows>
                <Row size="24" band="head"/>
                <Row size="24"/>
              </Rows>
              <Band id="head">
                <Cell text="파일명"/>
                <Cell col="1" text="파일용량"/>
              </Band>
              <Band id="body">
                <Cell text="bind:file"/>
                <Cell col="1" text="bind:filepac"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn_addFile" taborder="7" text="파일 첨부" left="767" top="ImageViewer00:10" width="94" height="40" onclick="btn_addFile_onclick"/>
        <Button id="btn_deleteFile" taborder="8" text="파일 삭제" left="767" top="btn_addFile:15" width="94" height="40" onclick="btn_deleteFile_onclick"/>
        <Button id="btn_addBoard" taborder="9" text="수정" left="401" top="grd_file:50" width="72" height="33" onclick="btn_addBoard_onclick"/>
        <Static id="stt_uploader" taborder="10" text="name" left="287" top="217" width="181" height="40" font="16px/normal &quot;Gulim&quot;"/>
        <Edit id="txt_title" taborder="11" left="277" top="154" width="584" height="46" onsetfocus="txt_title_onsetfocus"/>
        <Button id="btn_addContentPhoto" taborder="13" text="본문 사진 추가" left="664" top="227" width="94" height="20" onclick="btn_addContentPhoto_onclick"/>
        <Edit id="edt_filename" taborder="14" left="545" top="227" width="106" height="20" readonly="true"/>
        <Button id="btn_delContentPhoto" taborder="15" text="본문 사진 삭제" left="768" top="227" width="94" height="20" onclick="btn_delContentPhoto_onclick"/>
        <Button id="btn_closeBoard" taborder="16" text="닫기" left="494" top="grd_file:50" width="72" height="33" onclick="btn_closeBoard_onclick"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[// 폼 온로드
this.board_upload_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// 글로벌 DS(SESSION)에서 작성자 이름 ds_board에 박기
	var gdsApp = nexacro.getApplication();
	var adName = gdsApp.gds_adminInfo.getColumn(0, "ADMIN_NAME");
	this.ds_board.setColumn(0, "ADMIN_NAME", adName);
	trace("이름 제대로 들어갔나? " + this.ds_board.getColumn(0, "ADMIN_NAME"));
	
	var adCode = gdsApp.gds_adminInfo.getColumn(0, "ADMIN_CODE");
	this.ds_board.setColumn(0, "ADMIN_CODE", adCode);
	trace("코드 제대로 들어갔나? " + this.ds_board.getColumn(0, "ADMIN_CODE"));
	
	trace(this.ds_board.saveXML);
};

/************************************************************************
 * 						게시물 내용 이미지 처리
 ************************************************************************/

// 이미지의 유무에 따라 컴포넌트 높이를 조정하는 함수
this.adjustTextareaHeight = function() {

	this.set_height(720); // 폼 길이 초기화
	
	// 기준이 될 content tarea
	var contentY = this.txt_content.getOffsetBottom();  // TextArea의 하단 y 좌표	
	
	if (this.ImageViewer00.visible) {	
		var contimgbot = this.ImageViewer00.getOffsetBottom();
		
		this.ImageViewer00.set_top(contentY + 5);
		
		// content, file 높이 15차이 , stt, upload btn 높이 동일시
// 		this.grd_file.set_top(contimgbot + 15);  // 다른 컴포넌트를 imgviewer 하단에 배치
// 		this.stt_file.set_top(contimgbot + 15);
// 		this.btn_addFile.set_top(contimgbot + 15);
// 		this.btn_deleteFile.set_top(contimgbot + 65);
// 		this.btn_addBoard.set_top(contimgbot + 175);
// 		this.btn_closeBoard.set_top(contimgbot + 175);
	}
};

// 본문 사진 첨부

this.btn_addContentPhoto_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.FileDialog01.open('contentPhoto', FileDialog.LOAD);
};

// 확장자 설정
this.gfnIsImageFile = function(fileTxt) {
    var imageExt = ["png", "jpg", "jpeg", "jfif"];
    var extNm = fileTxt.substr(fileTxt.lastIndexOf(".") + 1).toLowerCase(); // 확장자를 소문자로 변환
    return imageExt.includes(extNm);
};

// 파일 올릴 때 함수
this.FileDialog01_onclose = function(obj:nexacro.FileDialog, e:nexacro.FileDialogEventInfo) {
	var contentfiletype = e.virtualfiles[0].filename;
	
	if(e.virtualfiles.length > 1){
		alert("파일이 두개 이상입니다.");
		return;
	}
	
 	else if(!this.gfnIsImageFile(contentfiletype)){
		alert("png, "+ "jpg, "+ "jpeg, " + "jfif " + "가 아닙니다.");
		return;
 	}
	
	this.btn_delContentPhoto_onclick;
	
	this.addFileList2(e.virtualfiles);
	var name = e.virtualfiles[0].filename;
	this.ds_contentFile.setColumn(0, "IMAGE", e.virtualfiles[0].filename);
	trace(name + "@@@@@@@@@@@@@@@@@@@@@@");
	
	this.edt_filename.set_value(name);
	
    this.ImageViewer00.set_visible(true);    // 본문 이미지 보이기
	
	setTimeout(function(){
		this.addFileList2(e.virtualfiles);
		this.showImagePreview(this.ds_contentFile.getColumn(0,"IMAGE"));
	}.bind(this), 2500); // 2500ms 뒤 실행
	trace(this.ds_contentFile.saveXML());
};

this.showImagePreview = function(fileName) {
    var encodedFileName = encodeURIComponent(fileName); // 파일 이름 URL 인코딩
    var imagePath = "http://localhost:8082/HanaUIS/showFile.jsp?filename=" + encodedFileName +"&type=view"; // 업로드한 파일 경로
	this.ImageViewer00.set_image("url('" + imagePath + "')"); // ImageViewer에 이미지 설정
	
 	setTimeout(function(){
 		this.deleteFile(fileName);
 	}.bind(this), 5000); // 5초 후 삭제
};

this.deleteFile = function(fileName) {
	trace("여기까지 왔나?");
    var encodedFileName = encodeURIComponent(fileName); // 파일 이름 URL 인코딩
    var deleteUrl = "http://localhost:8082/HanaUIS/deleteFile.jsp?filename=" + encodedFileName; // 파일 삭제 요청 URL
	
	var params = {
		filename: fileName // 파일 이름을 파라미터로 전달
	};
	var xhr = new XMLHttpRequest();
	xhr.open("POST", deleteUrl, true);
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	xhr.onreadystatechange = function () {
		if (xhr.readyState === 4) {
			if (xhr.status === 200) {
				trace("서버 응답: " + xhr.responseText);
			} else {
				trace("오류 발생: " + xhr.status);
			}
		}
	};
	xhr.send("filename=" + encodeURIComponent(fileName));
};

// 파일 업로드 함수
this.uploadFileToServer = function(vFile) {
	this.FileUpTransfer01.clearFileList();
    this.FileUpTransfer01.addFile(vFile.filename, vFile);
    this.FileUpTransfer01.upload("http://localhost:8082/HanaUIS/showfileupload.jsp"); // JSP 파일 경로
}


this.addFileList2 = function(filelist) {
    for (var i = 0, len = filelist.length, vFile; i < len; i++) {
        vFile = filelist[i];
        vFile.addEventHandler("onsuccess", this.FileList_onsuccess, this);
        vFile.addEventHandler("onerror", this.FileList_onerror, this);
		
        // 파일을 서버에 업로드하는 함수 호출
        this.uploadFileToServer(vFile);
    }
} 

this.ImageViewer00_onload = function(obj:nexacro.ImageViewer,e:nexacro.LoadEventInfo)
{
	//this.ImageViewer00.imageheigh = 0;
	trace('이미지 온로드 시작');	
	this.fnContImg(obj, e);
	
	this.stt_content.set_height(this.txt_content.getOffsetHeight() + obj.imageheight + 5);
	this.adjustTextareaHeight();
	this.resetScroll();
	/*
	var imgviehei = this.ImageViewer00.imageheight;
	var imgviewid = this.ImageViewer00.imagewidth;
	trace(imgviehei);
	
	this.ImageViewer00.set_height(imgviehei);
	this.ImageViewer00.set_width(imgviewid);
	*/
};


//본문 이미지 크기 조절
this.fnContImg = function(obj, e) {
	// 본문 textarea의 너비 (본문이 존재하는 경우에만 적용)
	var textareaWidth = this.txt_content.width;
	console.log("기능타냐 ");
	
	obj.set_stretch("none");
	
	// 실제 이미지의 원본 너비와 높이를 가져옴
	var imgWidth = obj.imagewidth;
	var imgHeight = obj.imageheight;
	
	console.log(textareaWidth);
	console.log(imgWidth);
	console.log(imgHeight);

	// 이미지가 본문 textarea보다 가로가 크지 않도록 제한
	var newWidth = textareaWidth;
	var newHeight = (textareaWidth * imgHeight) / imgWidth;
	
	// 이미지가 텍스트 영역보다 크면 크기를 줄임
	obj.set_width(newWidth);   // 가로 크기 조정
	obj.set_height(newHeight); // 세로는 비율에 맞게 자동 조정
	console.log(obj.imageheight);
	
	obj.set_stretch("fit");
	
	// 기준이 될 content tarea
	var contentY = this.txt_content.getOffsetBottom();  // TextArea의 하단 y 좌표
	
	obj.set_top(contentY + 5);
	
	//trace(this.ds_file.saveXML());
	//trace(this.ds_fileInsert.saveXML());
};


// 본문 사진 삭제
this.btn_delContentPhoto_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.deleteFile(this.ds_contentFile.getColumn(0, "IMAGE"));
	
	this.resetScroll();

	if (this.ds_contentFile.getColumn(0, "IMAGE") == null || this.ds_contentFile.getColumn(0, "IMAGE") == "" || this.ds_contentFile.getColumn(0, "IMGAE") == "undefined") {
		alert("본문에 들어간 파일이 없습니다.");
	} else {
		this.edt_filename.set_value("");
		this.ImageViewer00.set_visible(false);
		this.ImageViewer00.set_image(null);
		
		// 기준이 될 content tarea
	var contentY = this.txt_content.getOffsetBottom();  // TextArea의 하단 y 좌표	
	
	if (!this.ImageViewer00.visible) {	
		var textbot = this.txt_content.getOffsetBottom();
		
		// content, file 높이 15차이 , stt, upload btn 높이 동일시
/*		this.grd_file.set_top(textbot + 15);  // 다른 컴포넌트를 imgviewer 하단에 배치
		this.stt_file.set_top(textbot + 15);
		this.btn_addFile.set_top(textbot + 15);
		this.btn_deleteFile.set_top(textbot + 65);
		this.btn_addBoard.set_top(textbot + 175);
		this.btn_closeBoard.set_top(textbot + 175);
*/		
		this.stt_content.set_height(this.txt_content.height);
		
		// 화면 길이 초기화
		this.set_height(720);
		}
	}
	
};

/************************************************************************
 *							파일 업로드
 ************************************************************************/

// 파일 업로드 버튼
this.btn_addFile_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//파일 첨부하기 위한 팝업 및 데이터 전달 도구 
    this.FileDialog00.open('nexacro17', FileDialog.MULTILOAD);	
};

// 파일 팝업 창 닫을 때 파일 추가
this.FileDialog00_onclose = function(obj:nexacro.FileDialog,e:nexacro.FileDialogEventInfo)
{
	// 파일 첨부 창에서 선택한 파일들을 가상에 추가
    this.addFileList(e.virtualfiles);
	console.log(e.virtualfiles.length);
	trace(e.virtualfiles);
	
	// 파일 제목들을 fileInsert_ds (FILE, BOARD db에 들어갈 ds)에 저장
	for(var i=0;i<e.virtualfiles.length;i++){	
		var nRow = this.ds_fileInsert.addRow();
		this.ds_fileInsert.setColumn(nRow, "FILE_NAME", e.virtualfiles[i].filename);
	}
	console.log(this.ds_fileInsert.saveXML());
	console.log(this.ds_file.saveXML());
};

// 파일 추가 처리 함수 (파일 첨부 창에서 선택한 파일들을 vFile에 list로 삽입)
this.addFileList = function(filelist) {
    for (var i = 0, len = filelist.length, vFile; i < len; i++)
    {
		// 파일이 제대로 들어오면 성공으로 / 실패로 반환
        vFile = filelist[i];
        vFile.addEventHandler("onsuccess", this.FileList_onsuccess, this);
        vFile.addEventHandler("onerror", this.FileList_onerror , this);
        
        vFile.open(null, 1);
    }
}

// 파일 드래그 드랍 관련
this.grd_file_ondrop = function(obj:nexacro.Grid,e:nexacro.GridDragEventInfo)
{
    if(e.datatype == "file")
    {
        this.addFileList(e.filelist);
		this.ds_fileInsert.setColumn(0, "FILE_NAME", e.virtualfiles[0].filename);
    }
};


// 파일 변환 성공 시 grid에 표현, ds에 추가 및 fileuptransfer에 추가
this.FileList_onsuccess = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo)
{
    switch (e.reason)
    {
        case 1:	
            obj.getFileSize();
            break;
        case 9:
            var nRowIdx = this.ds_file.addRow();
			this.ds_file.setColumn(nRowIdx, 0, obj.filename); 
			this.ds_file.setColumn(nRowIdx, 1, this.cutFileSize(e.filesize));
            this.FileUpTransfer00.addFile(obj.filename, obj);
            break;
    }
};

// 넘어가지 않을 시 에러 표현
this.FileList_onerror = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileErrorEventInfo)
{
    trace("errortype: "+e.errortype);
    trace("errormsg: "+e.errormsg);
    trace("statuscode: "+e.statuscode);
};


// 파일 사이즈 계산 함수
this.cutFileSize = function(filesize)
{
    var sOutput = filesize + " bytes";
    for (var aMultiples = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], nMultiple = 0, nApprox = filesize / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) 
    {
        sOutput = nApprox.toFixed(3) + " " + aMultiples[nMultiple];
    }
    return sOutput;
};

// 업로드한 파일 전체 삭제
this.btn_deleteFile_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	//selected file delete
	/*var nRow = this.ds_file.rowposition;*/
	this.ds_file.clearData();
	
// 	var objFileList = this.fileUpTransfer00.find(nRow);	// 선택 파일 찾기
// 	this.fileUpTransfer00.removeFile(objFileList); // 선택 파일삭제
	this.FileUpTransfer00.clearFileList();
};

// 파일 처리 진행, 오류, 완료 이벤트 함수
this.FileUpTransfer00_onprogress = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferProgressEventInfo)
{
    this.fn_addlog(e.loaded+"/"+e.total);
};

this.FileUpTransfer00_onsuccess = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferEventinfo)
{
    this.fn_addlog(e.code);
    this.fn_addlog(e.message);
};

this.FileUpTransfer00_onerror = function(obj:nexacro.FileUpTransfer,e:nexacro.FileUpTransferErrorEventInfo)
{
    this.fn_addlog(e.errormsg);
    this.fn_addlog(e.statuscode);
};

// 성공 및 실패 여부 표현
this.fn_addlog = function(strMessage)
{
    trace(strMessage + '\n');
}


/************************************************************************
 * 								데이터 전송
 ************************************************************************/

//공지사항 트랜잭션
 this.fnInsertBoardData = function() {
 
	// 제목 및 공지사항이 비었을 때 처리
	if(this.txt_title.value == ''
		 || this.txt_title.value == 'undefined'
		 || this.txt_title.value == null) {
			alert("제목을 입력해주세요.");
			return;
	}
		if(this.txt_content.value == ''
		 || this.txt_content.value == 'undefined'
		 || this.txt_content.value == null) {
			alert("내용을 입력해주세요.");
			return;
	}

    var strSvcId    = "insertBoard";
    var strSvcUrl   = "svc::insertBoard.do";
    var inData      = "ds_board=ds_board ds_contentFile=ds_contentFile";	// 정보를 넘길 데이터셋
    var outData     = "ds_board=ds_board";  // 결과를 받을 데이터셋
    var strArg      = ""
    var callBackFnc = "fnCallbackInsertFile";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
};

// 파일 저장 후 게시물 저장 호출될 콜백 함수
this.fnCallbackInsertFile = function(svcID, errorCode, errorMsg) {
    if (errorCode == 0) {  // 정상적으로 게시글이 저장되었을 때
		console.log("BOARD 테이블 작성 완료");
		this.fnInsertFileData(); // 2. 게시글 저장 후 파일을 저장하는 함수를 호출
    } else {
        alert("공지사항 등록 중 오류 발생: " + errorMsg);
    }
};


// 파일 입력 트랜잭션 (BOARD table INSERT 후 진행)
 this.fnInsertFileData = function() {
    var strSvcId    = "insertFile";
    var strSvcUrl   = "svc::insertFile.do";
    var inData      = "ds_fileInsert=ds_fileInsert ds_board=ds_board";
    var outData     = "";  // 결과를 받을 데이터셋
    var strArg      = ""
    var callBackFnc = "fnCallbackClosePopup";
    var isAsync     = false;

    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
};

// 마지막 파일 첨부 이후 팝업 닫기
this.fnCallbackClosePopup = function(svcID, errorCode, errorMsg) {
    if (errorCode == 0) {  // 정상적으로 게시글이 저장되었을 때
		console.log("FILE 테이블 작성 완료");
		this.alert("공지사항이 게시되었습니다");
		this.close;
    } else {
        alert("첨부파일 등록 중 오류 발생: " + errorMsg);
    }
};

// 등록 버튼 온클릭 이벤트
this.btn_addBoard_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	for (i=0; i < this.ds_fileInsert.rowcount; i++) {
		this.ds_fileInsert.setColumn(i, "TITLE", this.txt_title.value);
	}

	// JSP를 통해 POST 방식으로 로컬 폴더(D:/upload/)로 업로드)
    this.FileUpTransfer00.upload('http://localhost:8082/HanaUIS/fileupload.jsp'); // 본문 이미지 제외 모두
	this.FileUpTransfer01.upload('http://localhost:8082/HanaUIS/fileupload.jsp'); // 본문 이미지 한장

	
	// board에 넣고 callback함수로 file에 2차로 넣기
	this.fnInsertBoardData();
	this.ds_fileInsert.saveXML();
	
	this.close();
	
};

// 닫기 버튼
this.btn_closeBoard_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var onChanged = this.confirm("변경 사항은 저장되지 않습니다. 창을 닫으시겠습니까?");
		if (onChanged) {
			this.close();
		}
};]]></Script>
    <Objects>
      <Dataset id="ds_file">
        <ColumnInfo>
          <Column id="file" type="STRING" size="256"/>
          <Column id="filepac" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <FileUpTransfer id="FileUpTransfer00" onerror="FileUpTransfer00_onerror" onprogress="FileUpTransfer00_onprogress" onsuccess="FileUpTransfer00_onsuccess"/>
      <FileDialog id="FileDialog00" onclose="FileDialog00_onclose"/>
      <Dataset id="ds_board">
        <ColumnInfo>
          <Column id="TITLE" type="STRING" size="256"/>
          <Column id="ADMIN_NAME" type="STRING" size="256"/>
          <Column id="CONTENT" type="STRING" size="256"/>
          <Column id="ADMIN_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="ds_fileInsert">
        <ColumnInfo>
          <Column id="FILE_NAME" type="STRING" size="256"/>
          <Column id="TITLE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <FileDialog id="FileDialog01" onclose="FileDialog01_onclose"/>
      <Dataset id="ds_contentFile">
        <ColumnInfo>
          <Column id="IMAGE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <FileUpTransfer id="FileUpTransfer01"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="txt_content" propid="value" datasetid="ds_board" columnid="CONTENT"/>
      <BindItem id="item2" compid="stt_uploader" propid="text" datasetid="gds_adminInfo" columnid="NAME"/>
      <BindItem id="item3" compid="txt_title" propid="value" datasetid="ds_board" columnid="TITLE"/>
    </Bind>
  </Form>
</FDL>
